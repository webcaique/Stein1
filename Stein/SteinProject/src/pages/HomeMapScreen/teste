<MapView
provider={PROVIDER_GOOGLE}
style={{width: width, height: height}}
region={region}
loadingEnabled={true}
onMapReady={() => {
  Platform.OS === 'android'
    ? PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
      ).then(() => {
      })
}}
>
  {destination && (
    <Directions
      origin={region}
      destination={destination}
      onReady={()=>{


      }}
    />
  )}
{markers.map((coordenada, index) => (
  <Marker
    key={index}
    coordinate={{
      latitude: coordenada.latitude,
      longitude: coordenada.longitude,
    }}
    title={coordenada.nome}
  />
))}
</MapView>



////////////////////////////////////////////////////////////////////////////////////////////////
import React, {Component} from 'react';
import {Text, View} from 'react-native';
import MapView, {Marker} from 'react-native-maps';
import Search from './search';
import Directions from './direction';
import {getPixelRatio} from './editDirection';

export default class Map extends Component {
  state = {
    destination: null,
    minDuration: null,
    locMenorDuracao:null,
    menorDuracao: null,
  };

  handleLocationSelected = (data, {geometry}) => {
    const {
      location: {lat: latitude, lng: longitude},
    } = geometry;
    this.setState({
      destination: {
        latitude,
        longitude,
        title: data.structured_formatting.main_text,
      },
    });
  };

  pertos = (mark) => {
    const origin = this.props.userMapRegion; // Substitua pelas coordenadas da localização atual do usuário.
    const apiKey = 'AIzaSyAdVbhYEhx50Y8TS7tulpNCkj8yMZPYiSQ'; // Substitua pela sua chave de API do Google Maps.
    let count = 0;
    mark.forEach(location => {
      const destination = {
        latitude: location.latitude,
        longitude: location.longitude,
      };

      // Solicitar as direções do Google Maps
      fetch(
        `https://maps.googleapis.com/maps/api/directions/json?origin=${origin.latitude},${origin.longitude}&destination=${destination.latitude},${destination.longitude}&key=${apiKey}`,
      )
        .then(response => response.json())
        .then(data => {
          if (data.routes && data.routes.length > 0) {
            const duration = data.routes[0].legs[0].duration.value;
            if (duration < this.state.minDuration) {
              this.setState({
                minDuration: duration,
              });
              if(this.props.dest.length == count){ 
                this.setState({
                  locMenorDuracao: destination,
                })
              }
            }
          }
        })
        .catch(error => {
          console.error('Erro ao calcular a duração da viagem:', error);
        });
        count++;
    });
    this.setState({
      menorDuracao: this.state.locMenorDuracao,
      destination: null,
    })
    return this.state.menorDuracao;
  }

  render() {
    const {
      userMapRegion,
      chargerMarkes,
      inf,
      searchVer,
      resetSrc,
      dest,
    } = this.props;
    const {destination, menorDuracao} = this.state;

    return (
      <View style={{flex: 1}}>
        <MapView
          style={{flex: 1}}
          region={userMapRegion}
          loadingEnabled
          ref={el => (this.mapView = el)}>
          <Marker coordinate={userMapRegion} />

          {destination || menorDuracao? (
            <>
              <Directions
                origin={userMapRegion}
                destination={destination || this.pertos(dest[0])}
                onReady={result => {
                  inf(result.distance, result.duration);
                  resetSrc(true);
                  this.mapView.fitToCoordinates(result.coordinates, {
                    edgePadding: {
                      right: getPixelRatio(10),
                      top: getPixelRatio(10),
                      left: getPixelRatio(10),
                      bottom: getPixelRatio(10),
                    },
                  });
                }}
              />
              <Marker coordinate={destination || menorDuracao} />
            </>
          ) : null}
          {chargerMarkes}
        </MapView>

        {searchVer && (
          <Search
            resetSearch={resetSrc}
            onLocationSelected={this.handleLocationSelected}
            searchVal={searchVer}
            
          />
        )}
      </View>
    );
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////
import React, {useState, useEffect} from 'react';
import {
  Text,
  View,
  Image,
  TouchableOpacity,
  Pressable,
  Modal,
  ScrollView,
  Dimensions,
} from 'react-native';
import estilos from './style';
import {
  verticalScale,
  scale,
  ScaledSheet,
  moderateScale,
  moderateVerticalScale,
} from 'react-native-size-matters';
import TabelaCarregadores from '../componenteTabelaCarregadores.js';
import MapView, {PROVIDER_GOOGLE, Marker} from 'react-native-maps';
import Geolocation from '@react-native-community/geolocation';
import {firestore} from '../../config/configFirebase';
import {useFocusEffect} from '@react-navigation/native';
import Map from './maps';
import Rota from './calcualrRota';

const Img =
  'https://firebasestorage.googleapis.com/v0/b/stein-182fa.appspot.com/o/Icons%2Fmapa.jpeg?alt=media&token=4e747581-497c-46c6-bde2-67def3834eb6';

const {width, height} = Dimensions.get('screen');
export default function Stein({navigation}) {
  const [distancia, setDistancia] = useState('');
  const [duracao, setDuracao] = useState('');
  const [search, setSeach] = useState('');
  const [searchLoading, setSearchLoading] = useState('');
  const [refreshKey, setRefreshKey] = useState(0);
  const [rotation, setRotation] = useState(90);
  const [modal, setModal] = useState(false);
  const [filtros, setFiltros] = useState(false);
  const [markers, setMarkers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [region, setRegion] = useState({
    latitude: -23.5440494, // Coordenada inicial (pode ser qualquer coisa)
    longitude: -46.9013996, // Coordenada inicial (pode ser qualquer coisa)
    latitudeDelta: 0.0922,
    longitudeDelta: 0.0421,
  });
  const [menorDuracao, setMenorDuracao] = useState(null);
  const [minDuration, setMinDuration] = useState(Infinity);
  const [locMenorDuracao, setLocMenorDuracao] = useState();
  const [pontosPertos, setPontosPertos] = useState("");

  const tabelaLogra = firestore.collection('logradouro');
  const tabelaCarregadores = firestore.collection('carregadores');

  resetSearch = srcVal => {
    setSearchLoading(srcVal);
  };

  getInfo = (dist, durc) => {
    setDistancia(dist);
    setDuracao(durc);
  };

  const fetchMarkersFromFirestore = async () => {
    try {
      const snapshotCarr = await tabelaCarregadores.get();
      const listCarr = [];
      snapshotCarr.forEach(data => {
        listCarr.push({id: data.id, ...data.data()});
      });

      const snapshotLogra = await tabelaLogra.get();
      const listaLogra = [];
      snapshotLogra.forEach(doc => {
        listaLogra.push({id: doc.id, ...doc.data()});
      });

      const newMarkers = [];

      listaLogra.forEach(docs => {
        listCarr.forEach(datas => {
          if (datas.IDLogradouro === docs.id) {
            let nome = datas.nome;
            const novoPonto = {...docs.geolocalizacao, nome};
            newMarkers.push(novoPonto);
          }
        });
      });

      setMarkers(newMarkers);
      setLoading(false);
    } catch (error) {
      setLoading(false);
    }
  };

  const restartPage = () => {
    // Incrementa a chave para forçar a reinicialização
    setRefreshKey(prevKey => prevKey + 1);
  };

  useFocusEffect(
    React.useCallback(() => {
      fetchMarkersFromFirestore();
    }, []),
  );

  function GetMyLocation() {
    Geolocation.getCurrentPosition(
      position => {
        const userRegion = {
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421,
        };
        setRegion(userRegion);
      },
      error => {
        console.log('Erro ao obter a localização:', error);
      },
      {
        enableHighAccuracy: false,
        timeout: 2000,
        maximumAge: 1000,
      },
    );
  }

  useEffect(() => {
    GetMyLocation();
    setDistancia('');
    setDuracao('');
    const unsubscribe = tabelaLogra.onSnapshot(snapshot => {
      // Quando há uma alteração na coleção 'logradouro'
      // (por exemplo, quando novos dados são adicionados), a função será chamada
      // Você pode adicionar lógica adicional aqui se necessário
      fetchMarkersFromFirestore();
    });
    return () => {
      // Certifique-se de cancelar a inscrição quando o componente for desmontado
      unsubscribe();
      fetchMarkersFromFirestore();
      navigation.addListener('focus', restartPage);
    };

    // Coloque aqui o código que deseja executar quando a tela receber foco.
  }, [navigation]);

  // Estado para controlar a rotação

  const rotateIcon = () => {
    // Ao ser clicado, altera o ângulo de rotação em 180 graus
    setRotation(rotation + 180);
  };

  const [selectedCarregadores, setSelectedCarregadores] = useState([]);
  const toggleCarregadorSelection = carr => {
    setSelectedCarregadores(carr);
  };


  if (loading) {
    return <Text>Carregando</Text>;
  } else {
    return (
      <View key={refreshKey} style={estilos.superior}>
      <View style={{width: '100%'}}>
        <Modal
          transparent={true}
          visible={modal} //Menu lateral
        >
          <ScrollView>
            <View
              style={{
                flex: 1,
                display: 'flex',
                flexDirection: 'row',
                width: '100%',
              }}>
              <View
                style={{
                  width: '90%',
                  height: '100%',
                  backgroundColor: '#ffffff',
                  borderBottomEndRadius: 5,
                  borderTopEndRadius: 5,
                  padding: 10,
                  height: filtros ? 'auto' : moderateScale(645),
                }}>
                <View style={estilos.modal}>
                  <View style={estilos.steinLogoBg}>
                    <Text style={estilos.textLogo}>STEIN</Text>
                    <Image
                      style={estilos.steinLogo}
                      source={{
                        uri: 'https://firebasestorage.googleapis.com/v0/b/stein-182fa.appspot.com/o/Icons%2FlogoStein.png?alt=media&token=4e747581-497c-46c6-bde2-67def3834eb6',
                      }}
                    />
                  </View>
                  <TouchableOpacity
                    style={estilos.links}
                    onPress={() => {
                      setFiltros(!filtros);
                      rotateIcon();
                    }}>
                    <View
                      style={{
                        flexDirection: 'row',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                      }}>
                      <View style={estilos.containerLink}>
                        <Image
                          style={{...estilos.imagemIcon1}}
                          source={{
                            uri: 'https://firebasestorage.googleapis.com/v0/b/stein-182fa.appspot.com/o/Icons%2Ffilter.png?alt=media&token=4e747581-497c-46c6-bde2-67def3834eb6',
                          }}
                        />
                        <Text style={estilos.textLink}>Filtros</Text>
                      </View>
                      <Image
                        style={{
                          ...estilos.imagemIcon2,
                          transform: [{rotate: `${rotation}deg`}],
                        }}
                        source={{
                          uri: 'https://firebasestorage.googleapis.com/v0/b/stein-182fa.appspot.com/o/Icons%2Fseta-direita.png?alt=media&token=4e747581-497c-46c6-bde2-67def3834eb6',
                        }}
                      />
                    </View>
                  </TouchableOpacity>
                  {filtros ? (
                    <View style={estilos.centerTabela}>
                      <TabelaCarregadores
                        onSelectCarregadores={toggleCarregadorSelection}
                      />
                    </View>
                  ) : (
                    <View></View>
                  )}

                  <TouchableOpacity
                    style={{...estilos.links}}
                    onPress={() => {
                      setModal(!modal);
                      navigation.navigate('AddCharger');
                    }}>
                    <View
                      style={{
                        flexDirection: 'row',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                      }}>
                      <View style={estilos.containerLink}>
                        <Image
                          style={estilos.imagemIcon1}
                          source={{
                            uri: 'https://firebasestorage.googleapis.com/v0/b/stein-182fa.appspot.com/o/Icons%2Fcharger.png?alt=media&token=4e747581-497c-46c6-bde2-67def3834eb6',
                          }}
                        />
                        <Text style={estilos.textLink}>
                          Adicionar carregador
                        </Text>
                      </View>
                    </View>
                  </TouchableOpacity>

                  <TouchableOpacity style={estilos.links}>
                    <View
                      style={{
                        flexDirection: 'row',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                      }}>
                      <View style={estilos.containerLink}>
                        <Image
                          style={estilos.imagemIcon1}
                          source={{
                            uri: 'https://firebasestorage.googleapis.com/v0/b/stein-182fa.appspot.com/o/Icons%2Fhistoria.png?alt=media&token=4e747581-497c-46c6-bde2-67def3834eb6',
                          }}
                        />
                        <Text style={estilos.textLink}>Atividade recente</Text>
                      </View>
                      <Image
                        style={estilos.imagemIcon2}
                        source={{
                          uri: 'https://firebasestorage.googleapis.com/v0/b/stein-182fa.appspot.com/o/Icons%2Fwhite.png?alt=media&token=4e747581-497c-46c6-bde2-67def3834eb6',
                        }}
                      />
                    </View>
                  </TouchableOpacity>

                  <TouchableOpacity
                    style={estilos.links}
                    onPress={() => {
                      setModal(!modal);
                      navigation.navigate('ConfingScreen');
                    }}>
                    <View
                      style={{
                        flexDirection: 'row',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                      }}>
                      <View style={estilos.containerLink}>
                        <Image
                          style={estilos.imagemIcon1}
                          source={{
                            uri: 'https://firebasestorage.googleapis.com/v0/b/stein-182fa.appspot.com/o/Icons%2Fconfig.png?alt=media&token=4e747581-497c-46c6-bde2-67def3834eb6',
                          }}
                        />
                        <Text style={estilos.textLink}>Configurações</Text>
                      </View>
                      <Image
                        style={estilos.imagemIcon2}
                        source={{
                          uri: 'https://firebasestorage.googleapis.com/v0/b/stein-182fa.appspot.com/o/Icons%2Fwhite.png?alt=media&token=4e747581-497c-46c6-bde2-67def3834eb6',
                        }}
                      />
                    </View>
                  </TouchableOpacity>

                  <TouchableOpacity
                    style={estilos.links}
                    onPress={() => {
                      setModal(!modal);
                      navigation.navigate('FaqScreen');
                    }}>
                    <View
                      style={{
                        flexDirection: 'row',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                      }}>
                      <View style={estilos.containerLink}>
                        <Image
                          style={estilos.imagemIcon1}
                          source={{
                            uri: 'https://firebasestorage.googleapis.com/v0/b/stein-182fa.appspot.com/o/Icons%2Ffaq.png?alt=media&token=4e747581-497c-46c6-bde2-67def3834eb6',
                          }}
                        />
                        <Text style={estilos.textLink}>FaQ</Text>
                      </View>
                    </View>
                  </TouchableOpacity>
                </View>
              </View>
              <Pressable
                style={{width: '10%', height: '100%'}}
                onPress={() => {
                  setModal(false);
                }}
              />
            </View>
          </ScrollView>
        </Modal>
      </View>
      <View style={estilos.fundo}>
        <Map
          dest={pontosPertos}
          resetSrc={resetSearch}
          searchVer={search} // Passando o valor atual de searchVer
          userMapRegion={region}
          chargerMarkes={markers.map((coordenada, index) => (
            <Marker
              key={index}
              coordinate={{
                latitude: coordenada.latitude,
                longitude: coordenada.longitude,
              }}
              title={coordenada.nome}
            />
          ))}
          inf={getInfo}
        />

        <TouchableOpacity
          style={estilos.iconBoltBg}
          onPress={()=>{
            setPontosPertos(markers)
            setSeach(false);
            }}>
          <Image
            //Localizador de pontos pertos
            style={estilos.iconBolt}
            source={{
              uri: 'https://firebasestorage.googleapis.com/v0/b/stein-182fa.appspot.com/o/Icons%2FIconBolt.png?alt=media&token=4e747581-497c-46c6-bde2-67def3834eb6',
            }}
          />
        </TouchableOpacity>

        <View
          style={estilos.partesuperior}
          //Parte superior da tela
        >
          <TouchableOpacity onPress={() => setModal(!modal)}>
            <Image
              // Imagem para entrar no menu lateral
              style={{width: 40, height: 40, resizeMode: 'contain'}}
              source={{
                uri: 'https://firebasestorage.googleapis.com/v0/b/stein-182fa.appspot.com/o/Icons%2FmenuBranco.png?alt=media&token=4e747581-497c-46c6-bde2-67def3834eb6',
              }}
            />
          </TouchableOpacity>
        </View>
      </View>

      <View style={estilos.inferior}>
        <TouchableOpacity
          onPress={() => navigation.navigate('UserScreen')}
          // Ir para a tela usuário
        >
          <Image
            source={{
              uri: 'https://firebasestorage.googleapis.com/v0/b/stein-182fa.appspot.com/o/Icons%2Fuser.png?alt=media&token=4e747581-497c-46c6-bde2-67def3834eb6',
            }}
            style={{
              resizeMode: 'contain',
              height: '92%',
              width: '92%',
              position: 'relative',
              right: '36%',
              top: '10%',
            }}
          />
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => {
            setSeach(!search);
            setMinDuration('');
            setLocMenorDuracao('');
            setMenorDuracao('');
          }}>
          <Image
            // Botão para pesquisar a localização
            source={{
              uri: 'https://firebasestorage.googleapis.com/v0/b/stein-182fa.appspot.com/o/Icons%2Flupa.png?alt=media&token=4e747581-497c-46c6-bde2-67def3834eb6',
            }}
            style={{
              resizeMode: 'contain',
              height: '92%',
              width: '92%',
              position: 'relative',
              left: '45%',
              bottom: '90%',
            }}
          />
        </TouchableOpacity>
      </View>
      {searchLoading ? <Rota distancia={distancia} duracao={duracao} /> : ''}
    </View>
    );
  }
}
